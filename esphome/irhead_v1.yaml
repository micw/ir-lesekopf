wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  reboot_timeout: 0s
  manual_ip:
    static_ip: 192.168.191.16
    gateway: 192.168.191.1
    subnet: 255.255.255.0
    dns1: 192.168.191.14

mqtt:
 id: gridmeter
 broker: 192.168.191.14
 # comment out for anonymous mqtt
 username: !secret mqtt_username
 password: !secret mqtt_password
 reboot_timeout: "0s"
 topic_prefix: gridmeter

time:
   - platform: sntp
     id: sntp_time
     timezone: Europe/Berlin

## Enable Home Assistant API
#api:

ota:

web_server:
   port: 80

esphome:
   name: gridmeter
   platform: ESP8266
   board: d1_mini
   esp8266_restore_from_flash: False

logger:
   baud_rate: 0 # do not log on serial, it can cause a boot loop with uart
   level: INFO

uart:
   - id: meter_in
     rx_pin:
       number: D2
       inverted: false
       mode:
         input: true
         pullup: false
     tx_pin:
       number: TX
     baud_rate: 9600
     data_bits: 8
     parity: NONE
     stop_bits: 1
     rx_buffer_size: 512
     debug:
       direction: RX
       after:
         timeout: 250ms
         bytes: 512
       sequence:
         - uart.write: !lambda return bytes;
         # raw SML data via MQTT (if required)
         #- lambda: id(mqttclient).publish("gridmeter/sensor/sml/state", format_hex(bytes));
         - lambda: UARTDebug::log_hex(direction, bytes, 0);

sml:
   - id: sml0
     uart_id: meter_in

sensor:
   - platform: sml
     retain: false
     name: "powerConsumeCurrent"
     id: "powerConsumeCurrent"
     sml_id: sml0
     obis_code: "1-0:16.7.0"
     unit_of_measurement: W
     accuracy_decimals: 0
     device_class: energy
     filters:
       - multiply: 1
   - platform: sml
     retain: false
     name: "powerConsumeCurrentPhase1"
     id: "powerConsumeCurrentPhase1"
     sml_id: sml0
     obis_code: "1-0:36.7.0"
     unit_of_measurement: W
     accuracy_decimals: 0
     device_class: energy
     filters:
       - multiply: 1
   - platform: sml
     retain: false
     name: "powerConsumeCurrentPhase2"
     id: "powerConsumeCurrentPhase2"
     sml_id: sml0
     obis_code: "1-0:56.7.0"
     unit_of_measurement: W
     accuracy_decimals: 0
     device_class: energy
     filters:
       - multiply: 1
   - platform: sml
     retain: false
     name: "powerConsumeCurrentPhase3"
     id: "powerConsumeCurrentPhase3"
     sml_id: sml0
     obis_code: "1-0:76.7.0"
     unit_of_measurement: W
     accuracy_decimals: 0
     device_class: energy
     filters:
       - multiply: 1

   - platform: sml
     retain: false
     name: "powerConsumeCounter"
     id: "powerConsumeCounter"
     sml_id: sml0
     obis_code: "1-0:1.8.0"
     unit_of_measurement: Wh
     accuracy_decimals: 1
     device_class: energy
     filters:
       - multiply: 0.1
     on_value:
       - binary_sensor.template.publish:
           id: led_delayed_off
           state: ON
       - binary_sensor.template.publish:
           id: led_delayed_off
           state: OFF
   - platform: sml
     retain: false
     name: "powerDeliverCounter"
     id: "powerDeliverCounter"
     sml_id: sml0
     obis_code: "1-0:2.8.0"
     unit_of_measurement: Wh
     accuracy_decimals: 1
     device_class: energy
     filters:
       - multiply: 0.1

binary_sensor:
   - platform: template
     id: led_delayed_off
     filters:
       - delayed_off: 200ms
     on_press:
       then:
         - light.turn_on:
             id: led
             brightness: 30%
     on_release:
       then:
         - light.turn_off: led

light:
   - platform: monochromatic
     output: led_output
     id: led
     default_transition_length: 0s
     internal: true

output:
   - platform: esp8266_pwm
     pin: D1
     frequency: 1000 Hz
     id: led_output
